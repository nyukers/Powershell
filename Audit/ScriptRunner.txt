Today I would like to present for your eyes the best e-book of authors Michael Pietroforte and Wolfgang Sommergut
"PowerShell Security".

https://lp.scriptrunner.com/en/powershell-security-guide

These authors describe in details security features in Powershell:
- Control execution of scripts using execution policy, code signing
and constrained language mode
- Secure PowerShell remoting with SSH und TLS
- Delegate administrative tasks with JEA
- Audit and analyze PowerShell activities, encrypt logs
- Improve code quality following best practices.


PowerShell is a powerful tool for system administration and as such also a
perfect means for hackers. Due to the tight integration into the system,
attempts to simply block PowerShell provide a false impression of security.
The best protection is provided by PowerShell's own mechanisms.
PowerShell offers almost unlimited access to the resources of a Windows
computer and also can automate numerous applications such as Ex-
change. Users aren't limited to the many modules and cmdlets, but can
also integrate .NET classes, Windows APIs, and COM objects. These capa-
bilities are particularly dangerous in the hands of attackers.
Since many versions of With Windows Server, Microsoft avoids to activate
any roles and features on a freshly installed machine in order to minimize
the attack surface. On such a locked down system users must explicitly add
all required services.

So, now I try to explain for you these features in practically. Let's go.

# Execution scripts.

We can define policies for execution Powershell scripts on the host by:
- GPO
- signing our script
- set constrained language mode

# Execution policy.

I prefer set RemoteSigned mode. It means that Scripts downloaded from the Internet must be signed by a trusted publisher.
How it set?
Set-ExecutionPolicy RemoteSigned
Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
$env:PSExecutionPolicyPreference

How it check?
Get-ExecutionPolicy -List | ft -AutoSize

We can set Turn on Poweshell script execution by GPO.
How it set?
mmc: Policies => Administrative Templates => Windows Components => Windows PowerShell and is called Turn on Script Execution.
So: powershell.exe -ExecutionPolicy "Unrestricted" doesn't work!

However you can bypass it as following:
a) If a user decides to circumvent this policy, he simply copies the contents of a script to the ISE and runs it there. 
b) RemoteSigned allows unsigned scripts downloaded from the Internet to be started if you unblock the file using Unblock-File.
c) Another bypass consists of encoding the script in Base64 and transferring it to PowerShell.exe via the EncodedCommand parameter. 

To limit possible damage caused by such activities, it is recommended to use the Constrained Language Mode (Look section 2.3).

# Signing code.

You can use your corporative CA-server for issuing certificate:
https://CA-server-name/certsrv
Choose template: "Code Signing" and so on.

-OR-

Create template for Certificate...
Create Certificate...
Personal => All Tasks => Request New Certificate.
Enroll ...
And don't forget to move new Certificate from container Intermediate to Trusted Root.

Ok, check your Certificates:
Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert

Check and set your Execution Policy as AllSigned:
Get-ExecutionPolicy
Set-ExecutionPolicy AllSigned –Force

Get-ChildItem Cert:\CurrentUser\My –CodeSigningCert

$cert = (Get-ChildItem Cert:\CurrentUser\My –CodeSigningCert)[0]
Move-Item -Path $cert.PSPath -Destination "Cert:\LocalMachine\Root"

Set-AuthenticodeSignature myScript.ps1 -Certificate $cert

The Set-AuthenticodeSignature cmdlet has a special TimestampServer parameter that specifies the URL for the Timestamp of the service. If this parameter is left blank,
then the PS script will stop running after the certificate expires.
For example: -TimestampServer http://timestamp.verisign.com/scripts/timstamp.dll
-OR-
Set-AuthenticodeSignature myScript.ps1 -Certificate $cert -TimestampServer http://timestamp.glob-alsign.com/scripts/timstamp.dll -HashAlgorithm "SHA256"

Get-AuthenticodeSignature MyTest.ps1 | ft -AutoSize

The root CA certificate and the certificate signed by the script must be trusted (otherwise the script will not run at all). You can centrally install certificates
to all computers in the domain using GPO. The certificates should be placed in the following GPO sections:
Computer Configuration -> Policies -> Windows Settings -> Security Settings -> Public Key Policies -> Trusted Root Certification Authorities è Trusted Publishers.

# Constrained Language Mode.

You can set LanguageMode easy:
$ExecutionContext.SessionState.LanguageMode = "ConstrainedLanguage"

1) If System environment variable __PSLockDownPolicy set it to 4, so Powershell run in restricted mode ONLY.
A disadvantage of this procedure is that it always affects all users of a host, including administrators((!
However, administrators may temporarily remove the environment variable until the GPO becomes effective again. 
But this is quite cumbersome and definitely not a good solution.

2) Automatic detection of an execution constraint - creates a module and a script 
(with a name following the pattern __PSSCRIPT-POLICYTEST_LQU1DAME.3DD.PSM1) under $env:temp and tries to execute them.
If AppLocker or another tool blocks this attempt, PowerShell will start in restricted language mode.
So you have to reconfigure AppLocker OR activating Constrained language mode via SRP.

3) You will need to remove PowerShell 2.0 Engine.
Check it: Get-WindowsOptionalFeature -Online -FeatureName MicrosoftWindowsPowerShellV2
However if you need v2.0 you can start PS as: powershell.exe -version 2.0

=====================================================
# Communication with hosts by:
-SSH
-Certificte
-HTTPS

# SSH.
Get-WindowsCapability -Online | ? name -like *OpenSSH.Server*
OR
Get-WindowsCapability -Online | where name -like *OpenSSH.Server* | Add-WindowsCapability -Online

Set-Service sshd -StartupType Automatic
Set-Service ssh-agent -StartupType Automatic

To put the SSH server into operation immediately, you must also start the two services manually:
Start-Service sshd
Start-Service ssh-agent

Check SSH services: Get-Service -Name *ssh* | select DisplayName, Status, StartType
Check SSH firewall rules: Get-NetFirewallRule -Name *SSH*
Check SSH connections: ssh <Name of SSH Server>

1) Local configuration.
ssh-keygen - by default, the command saves the key pair in the .ssh folder in your user profile. id_rsa is the private key, and id_rsa.pub is the public key.

Start-Service ssh-agent
If you want the service to start automatically after a restart, you can use this command:
Set-Service ssh-agent -StartupType Automatic

To add(remove) your private key to the ssh-agent, you have to enter this command:
ssh-add <path to private key>
ssh-add .ssh\id_rsa
ssh-add -d .ssh\id_rsa

2) Remote configuration.
Copy the contents of the public key file id_rsa.pub to the remote host to the authorized_keys file in C:\Users\<your user name\.ssh\

Disabling password authentication in sshd_config file set:
	PasswordAuthentication no

Restart-Service sshd

3) Connection with key.

Enter-PSession -HostName <remote host> -UserName <user name on the remote computer>
Invoke-Command -HostName <remote hosts> -UserName <user name on the remote computer> -ScriptBlock {get-process}
OR
ssh <user name on the remote computer>@<remote host>
ssh -i <path to private key>id_rsa <user name on the remote host>@<remote host>

Enter-PSsession and Invoke-Command have the -IdentityFilePath parameter for this purpose:
Enter-PSession -HostName <remote host> -UserName <user name on the remote host> -IdentityFilePath <path to private key>id_rsa

=====================================================
# Self-signed sertificate.

1) Creating a certificate with default values:
New-SelfSignedCertificate -DnsName lab.contoso.de -CertStoreLocation Cert:\LocalMachine\My
dir Cert:\LocalMachine\my\<thumbprint-of-certificate> | fl -Property *

For creating wildcard certificates:
New-SelfSignedCertificate -DnsName lab.contoso.de, *.contoso.de -cert Cert:\LocalMachine\My

This example sets the validity to 2 years:
New-SelfSignedCertificate -DnsName lab.contoso.de -CertStoreLocation Cert:\LocalMachine\My -NotAfter (Get-Date).AddYears(2)

In addition to the default value SSLServerAuthentication, the Type parameter also accepts these values:
- CodeSigningCert
- DocumentEncryptionCert
- DocumentEncryptionCertLegacyCsp

2) Export certificate:
$CertPW = ConvertTo-SecureString -String "secret" -Force -AsPlainText
 It is then passed to the parameter Password when calling Export-PfxCer-tificate:
Export-PfxCertificate -Password $CertPW ` -Cert cert:\LocalMachine\My\<Thumbprint> myCert.pfx

=====================================================
# HTTPS.
For communication between hosts via HTTPS you need WinRM service.
You have to check it:
winrm get winrm/config
dir WSMan:\localhost\Service | ? Name -eq AllowUnencrypted
dir WSMan:\localhost\Client | ? Name -eq AllowUnencrypted

1) So you have to enable HTTPS on the remote computer:
Set-WSManQuickConfig -UseSSL
$Cert = New-SelfSignedCertificate -DnsName "myHost" -CertstoreLocation Cert:\LocalMachine\My
Export-Certificate -Cert $Cert -FilePath C:\temp\cert
Enable-PSRemoting -SkipNetworkProfileCheck -Force

dir wsman:\localhost\listener

Remove the HTTP listener this way:
Get-ChildItem WSMan:\Localhost\listener | Where -Property Keys -eq "Transport=HTTP" | Remove-Item -Recurse

Removes all WSMan listeners:
Remove-Item -Path WSMan:\Localhost\listener\listener* -Recurse

Add our WSMan HTTPS listener:
New-Item -Path WSMan:\LocalHost\Listener -Transport HTTPS -Address * -CertificateThumbPrint $Cert.Thumbprint -Force

New-NetFirewallRule -LocalPort 5986 -Protocol TCP -DisplayName "Windows Remote Management (HTTPS-In)" -Name "Windows Remote Management (HTTPS-In)" -Profile Any
Set-Item WSMan:\localhost\Service\EnableCompatibility-HttpsListener -Value true
Set-NetConnectionProfile -NetworkCategory Private

Disable the firewall rule for HTTP that Enable-PSRemoting added:
Disable-NetFirewallRule -DisplayName "Windows Remote Man-agement (HTTP-In)"

2) And, of course, you have to enable HTTPS on the local computer:
Import-Certificate -Filepath "C:\temp\cert" -CertStoreLocation "Cert:\LocalMachine\Root"
Enter-PSSession -ComputerName myHost -UseSSL -Credential (Get-Credential) 
-OR-
Enter-PSSession -ComputerName myHost -UseSSL -Credential (Get-Credential) -SkipCACheck

Invoke-Command -ComputerName myHost -UseSSL -ScriptBlock {Get-Process} -Credential (Get-Credential)

=====================================================
# JEA.

I don't know if I need to describe JEA again. Ok, I will write about it very shortly today.
So, by default, there are three Session Configurations on each Windows computer, namely: 
microsoft.powershell, 
microsoft.powershell.workflow,
microsoft.windows.server-managerworkflows.

1) Get-PSSessionConfiguration

Define "HelpDesk" configuration:
Register-PSSessionConfiguration -Name HelpDesk

This opens the dialog you already know from managing file permissions:
Register-PSSessionConfiguration -Name HelpDesk -ShowSecurityDescriptorUI

Defining RunsAs users:
Register-PSSessionConfiguration -Name HelpDesk -RunAsCredential forza.com\MikeLee

Set additional options via configuration file:
New-PSSessionConfigurationFile -Path .\MyConfig.pssc

The following are particularly useful to prevent users from potentially harmful actions:
-LanguageMode with the values FullLanguage, RestrictedLanguage, ConstrainedLanguage, NoLanguage: The latter allows only the exe-cution of cmdlets and functions, other language resources are not available. 
FullLanguage offers the full range of language capabilities, the other two lie between these two poles.
-VisibleAliases, VisibleCmdlets, VisibleFunctions, VisibleProviders: These allow you to specify which aliases, cmdlets, functions, and providers are available in the session. 
You can use wildcards and specify multiple values as array.

Example:
New-PSSessionConfigurationFile -Path .\MyConfig.pssc -VisibleCmdlets "Get*","Select*"

You adjust the Session Configuration based on this file:
Set-PSSessionConfiguration -Name HelpDesk -Path .\MyConfig.pssc
Enter-PSSession -ComputerName Remote-PC -ConfigurationName HelpDesk
OR
Invoke-Command -ComputerName Remote-PC -ConfigurationName Helpdesk {Get-ChildItem}

2) New-PSRoleCapabilityFile -Path MyRCF.psrc

OR

JEA Helper Tool create MyRCF.psrc

Once you have created the list of permitted cmdlets and parameters, you can add them to the .psrc file. You save this file in a directory called RoleCapabilities under
$env:ProgramFiles\WindowsPowerShell\Modules

The last step is to link the role capabilities to the desired session configu-ration. To do this, edit the configuration file with the extension .pssc and add the role functions there.
Since you create this file automatically at the beginning, this (commented out) section for RoleDefinitions should already be there:
# RoleDefinitions = @{ 'CONTOSO\SqlAdmins' = ` @{ RoleCapabilities = 'SqlAdministration' }; 
'CONTOSO\SqlManaged' = @{ RoleCapabilityFiles = 'C:\RoleCapability\SqlManaged.psrc' }; 
'CONTOSO\ServerMonitors' = ` @{ VisibleCmdlets = 'Get-Process' } }

Ok, if I told you early you can find more information about it here.
I'm not sure that JEA will have good features in the nearest future.

=====================================================
# Audit.

You can perform audit of execution scripts by:
1) enable transcription:
	we are using Start-Transcript and Stop-Transcript cmdlets.

2) configure GPO:
	Policies > Administrative Templates > Windows Components > Windows PowerShell > PowerShell Transcription
	-OR-
	[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\PowerShellCore\Transcription] 
	"EnableTranscripting"=dword:00000001 
	"OutputDirectory"="\\server\\pslogs"

3) setup scriptblock logging by GPO or Registry:
	turn on PowerShell Script Block Logging and can be found under Policies > Administrative Templates > Windows Components > Windows PowerShell. 
	-OR-
	Script block logging for PowerShell Core:
	[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Pow-erShellCore\ScriptBlockLogging] 
	"EnableScriptBlockLogging"=dword:00000001

        Example:
	application log under Microsoft=> Windows => PowerShell => Operational, and the commands are recorded under
	Scriptblock logging: record commands in the event log 109 event ID 4104. If you also record start and stop events, these appear under the IDs 4105 and 4106.
	
	In event viewer activate as Source:
	+ PowerShell (Microsoft-Windows-PowerShell)
	+ PowerShell (PowerShell)
	+ PowerShellCore

	Merging command sequences by ID 6524:
	$created = Get-WinEvent -FilterHashtable ` @{ProviderName="Microsoft-Windows-PowerShell"; Id=4104} | where ProcessId -eq 6524
	$sortedScripts = $created | sort {$_.Properties[0].Value} $mergedScript = -join ($sortedScripts | foreach {$_.Properties[2].Value})


4) enable encryption events. Wow, is't possible? Sure!

Template of certification:
[Version]
Signature = "$Windows NT$"
[Strings]
szOID_ENHANCED_KEY_USAGE = "2.5.29.37"
szOID_DOCUMENT_ENCRYPTION = "1.3.6.1.4.1.311.80.1"
[NewRequest]
Subject = "cryptme@forza.com"
MachineKeySet = false
KeyLength = 2048
KeySpec = AT_KEYEXCHANGE
HashAlgorithm = Sha1
Exportable = true
RequestType = Cert
KeyUsage = "CERT_KEY_ENCIPHERMENT_KEY_USAGE | CERT_DATA_ENCIPHERMENT_KEY_USAGE"
ValidityPeriod = "Years"
ValidityPeriodUnits = "1000"
[Extensions]
%szOID_ENHANCED_KEY_USAGE% = "{text}%szOID_DOCUMENT_EN-CRYPTION%"

        1) Request:
	To request the certificate, use the command:
	certreq -new <INF-file-name>.inf <Certificate-name>.cer

	The certificate is automatically copied to the local certificate store of the logged-on user.

	2) Encode event: 
	To enable secure event logging, Microsoft provides a setting in Group Policy. 
	It is called Enable Protected Event Logging and can be found under Computer Configuration => 
	Policies => Administrative Templates => Windows Components => Event Logging.

	3) Decode event:
	$msg = Get-WinEvent Microsoft-Windows-PowerShell/Operational -ComputerName myPC -MaxEvents 2 -Credential domain\user
	"Last log entry as clear text:"
	$msg[1] | select -ExpandProperty Message | Unprotect-CmsMessage
	# $msg[0] is always "prompt"

	4) Protect smth:
	The process is relatively simple. Protect-CmsMessage expects the input file via the Path parameter. 
	Alternatively, you can provide the contents to be encrypted via the Content parameter or via a pipeline. 
	The target file is specified via OutFile; otherwise, the output is stdout.

	$protected = "Hello World"| Protect-CmsMessage -To BDDSAFASFRTNB380HGG657687GFDR
	$protected | Unprotect-CmsMessage

- registry:
	As with auditing the file system, three measures are required:
	+ Enable registry monitoring via GPO
	+ Configure the system access control list (SACL) for the resource in question
	+ Analyze the event log

	1) Activate registry auditing:
	Computer Configuration => Policies => Windows Settings => Security Settings => 
        Ad-vanced Audit Policy Configuration => Audit Policies => Object Access > Audit Registry.
	(Microsoft has deprecated the settings under Security Settings => Local Poli-cies => Audit Policy Win7)

	2) Setting permissions for registry keys
	When changing the SACL of this key in the registry of many computers, it makes sense to use a GPO. 
	You can configure the necessary setting under Computer Configuration => Policies => Windows Settings => Security Set-tings => Registry.

	3) You can retrieve these logs with PowerShell as follows:
	Get-EventLog -LogName Security -Source "*auditing*" -InstanceId 4657,4660

=====================================================
# Refactoring.

Of course, you have to maintain you code corresponding to clearance and best standards.
For it you can use Strict mode:
	Set-StrictMode -Version Latest

Also analyzing your code by ScriptAnalyzer is good practice:
ScriptAnalyzer features:
Get-Command -Module PSScriptAnalyzer
- Get-ScriptAnalyzerRule
- Invoke-ScriptAnalyzer
- Invoke-Formatter

ScriptAnalyzer step by step:

1) Get-ScriptAnalyzerRule -Severity Error

2) $file = Get-Content -Raw -Path .\MyCheck.ps1
   Invoke-ScriptAnalyzer -Path .\MyCheck.ps1 -Fix

3) Invoke-Formatter -ScriptDefinition '{ $_.Status.IsCompleted -eq $true }'

# where scriptDefinition is

$scriptDefinition = @'
function foo {
"Hello of all"
}
'@

# where settings is
 
$settings = @{
    IncludeRules = @("PSPlaceOpenBrace", "PSUseConsistentIndentation")
    Rules = @{
        PSPlaceOpenBrace = @{
            Enable = $true
            OnSameLine = $false
        }
        PSUseConsistentIndentation = @{
            Enable = $true
        }
    }
}

# and do it
Invoke-Formatter -ScriptDefinition $scriptDefinition -Settings $settings

